Additions...
SP counter, 8-bit not
MUX to select between SP for push and SP+1 for pop
JUMP and gate bit 11(negated) plus bit 12
pop tunnel to ld for reading memory
push four bit and wired up to str to write memory

Changes...
IR tunnel splitter fan-out 3 to get access to bit 11 which combined with bit 12 determines whether jump or not
Remove hard-coded 1 on regfile and wire the negated output of Jump up to the register file. Jump instructions are the ONLY instructions where we don't update the register file

Major Change...
Use the DMUX in the registerfile instead of a decoder


Assembled program...
000 1000 101 000001	loadi %5, $0x1
0001 0001 0100 0001	
1     1    4    1

000 1000 110 000010	loadi %6, $0x2
0001 0001 1000 0010
1     1    8     2

000 0000 001 101 110 	add %1, %5, %6    
0000 0000 0110 1110
0    0    6    E

000 1000 011 001000	loadi %3, $0x8
0001 0000 1100 1000
1    0    C    8

000 1000 100 001100	loadi %4, $0xc
0001 0001 0000 1100
1    1     0   C

000 0001 010 100 011	sub %2, %4, %3
0000 0010 1010 0011
0    2     A   3

000 0110 000 001 010	cmp %1, %2
0000 1100 0000 1010
0    C    0    A

000 1011 0 00000011 	jne label
0001 0110 0000 0011 	
1    6    0    3

000 1100 000000 001	push %1
0001 1000 0000 0001
1    8    0    1

000 1001 0 00000010  	j exit
0001 0010 0000 0010
1    2    0    2

000 1100 000000 010	push %2
0001 1000 0000 0001
1    8    0    2

000 1101 111 000000	pop %7
0001 1011 1100 0000
1    B    C    0

