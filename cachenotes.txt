cache terminoloy
  block size: the exact number of bytes loaded into the cache from RAM upon a cache miss
  cache miss: the data being accessed by the program is NOT in the cache
  cache hit: the data being accessed by the program IS in the cache

example:
    for (i = 0; i < len; i++) {
        sum += array[i];
    }

When i==0 (i.e., the first loop iteration), array[0] is likely to be a cache miss.
If the block size is 16, then array[1], array[2], and array[3] will all be cache hits.
Continuing on, array[4] is likely a miss, followed by hits on array[5, 6, and 7]

Direct-mapped cache ... the "cache line" (i.e., the spot where the block goes in the cache is directly in the memory address)
                                   tag        index   offset
salmon: 0b0000000000000000 0x00 0b 0000000000 00   1111
yellow: 0b0000000000010000 0x10 0b 0000000000 01   0000
green:  0b0000000000100000 0x20 0b 0000000000 10   0000
blue:   0b0000000000110000 0x30 0b 0000000000 11   0000
salmon: 0b0000000001000000 0x40 0b 0000000001 00   0000
yellow: 0b0000000001010000 0x50 0b 0000000001 01   0000
green:  0b0000000001100000 0x60 0b 0000000001 10   0000
blue:   0b0000000001110000 0x70 0b 0000000001 11   0000
salmon: 0b0000000010000000 0x40 0b 0000000010 00   0000
yellow: 0b0000000010010000 0x10
green:  0b0000000010100000 0x20
blue:   0b0000000010110000 0x30
salmon: 0b0000000011000000 0x40
yellow: 0b0000000011010000 0x50
green:  0b0000000011100000 0x60
blue:   0b0000000011110000 0x70

cache line/index: the bits of the memory address that determine which location in the cache that memory address belongs to

cache tag: the remaining bits to the left of the index (i.e., higher order bits) that uniquely identify that block 

LOGISIM IMPLEMENTATION NOTES:

1. Two modes ... "HIT" vs "MISS"
2. If "HIT" then retrieve the data from the cache and send it out along with the "ready bit" set
3. If "MISS" then start counting 16 times to retrieve the entire block from RAM and load it into the cache
   a. Note the introduction of the new register to track the "mode" .. when we are in the "service miss" mode, we don't want to increment the miss counter again and we want to make sure to start incrementing the byte counter to start retrieving all the bytes of the block
   b. Note that we don't want the clock to start counting until after we have detected the miss and set the mode
   c. This means that we have to set the "rising edge" / "falling edge" very carefully for all the state elements in our circuit as follows:
           HitCounter and MissCounter should both be "falling edge"
           The new "mode" register named "SM" which stands for "service miss" should be falling edge
           The shift register should be falling edge
           But the ByteCounter itself should be "rising edge"